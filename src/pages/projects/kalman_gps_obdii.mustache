<p>
    In the work that I've done in the 5G-CORAL project - connected cars testbed - I designed
    the software for an On-Board-Unit (OBU) which, among other things, reads the vehicle speed from
    the OBD-II connector and gets the position from the GNSS receiver.
</p>
<p>
    This inpired me to better understand the topic of sensor fusion, in particular how I could improve
    the accuracy of the GPS location by exploiting the knowledge of the speed of the vehicle, measured from
    the wheels RPMs.<br>
    The idea behind this is pretty simple and intuitive. If, due to random noise, the location of the car
    jumps by several meters in a fraction of a second, that means that the car would have accelerated to
    reach a very high speed in a very short amount of time, and this is not feasible.
    In addition to that, the speed measurement from the OBD-II port tells that the speed has never changed and
    therefore the sudden change of latitude and longitude must have been due to noise, and should be ignored.<br>
    The way to implement this logic is using a Kalman filter.
</p>
<p>
    I started the project with the development of a little python game where you can drive a car around on the screen
    and simulate the Kalman filtering for location improvement.<br>
    The program samples the real (simulated) location and adds white noise to it. This is then send to the Kalman
    filter which generates position and velocity estimates based on the simulated measurments of speed and position.
</p>
<div class="text-center">
    <figure class="figure">
        <img src="/static/img/portfolio/kalman-car-simulator.png" class="figure-img img-fluid rounded" alt="The Kalman filter simulator I developed to showcase the improvements in accuracy achieved with data fusion">
        <figcaption class="figure-caption">The Kalman filter simulator I developed to showcase the improvements in accuracy achieved with data fusion.<br>Yellow: ground truth; Green: measured location; White: estimated location</figcaption>
    </figure>
</div>
<p>
    This is still a work in progress and the next steps will be to move away from the cartesian coordinates sytem and
    use the car speed and not the velocity, since what the OBD-II tells you is the absolute value of the velocity, not
    its direction.<br>
    This makes the model of the measurement non linear and a Extended Kalman Filter EKF must be used.<br>
    In the future I'll also consider using the Unscented Kalman filter and the Particle filters
</p>
<p>
    As I said, this is still a work in progress and I'll be updating this page with whatever new I will achieve.
</p>
